"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.explorePrivateKey = void 0;
var asn1_js_1 = require("./asn1.js");
var crypto_utils_js_1 = require("./crypto_utils.js");
function f(buffer, b) {
    return buffer.subarray(b.position + 1, b.position + b.length);
}
var doDebug = !!process.env.DEBUG;
function explorePrivateKey(privateKey2) {
    var privateKey1 = privateKey2.hidden;
    var privateKey = typeof privateKey1 === "string" ? (0, crypto_utils_js_1.convertPEMtoDER)(privateKey1) : privateKey1.export({ format: "der", type: "pkcs1" });
    var block_info = (0, asn1_js_1.readTag)(privateKey, 0);
    var blocks = (0, asn1_js_1._readStruct)(privateKey, block_info);
    if (blocks.length === 9) {
        var version_1 = f(privateKey, blocks[0]);
        var modulus_1 = f(privateKey, blocks[1]);
        var publicExponent_1 = f(privateKey, blocks[2]);
        var privateExponent_1 = f(privateKey, blocks[3]);
        var prime1_1 = f(privateKey, blocks[4]);
        var prime2_1 = f(privateKey, blocks[5]);
        var exponent1_1 = f(privateKey, blocks[6]);
        var exponent2_1 = f(privateKey, blocks[7]);
        return {
            version: version_1,
            modulus: modulus_1,
            publicExponent: publicExponent_1,
            privateExponent: privateExponent_1,
            prime1: prime1_1,
            prime2: prime2_1,
            exponent1: exponent1_1,
            exponent2: exponent2_1,
        };
    }
    if (doDebug) {
        console.log("-------------------- private key:");
        console.log(block_info);
        console.log(blocks.map(function (b) { return ({
            tag: asn1_js_1.TagType[b.tag] + " 0x" + b.tag.toString(16),
            l: b.length,
            p: b.position,
            buff: privateKey.subarray(b.position, b.position + b.length).toString("hex"),
        }); }));
    }
    var b = blocks[2];
    var bb = privateKey.subarray(b.position, b.position + b.length);
    var block_info1 = (0, asn1_js_1.readTag)(bb, 0);
    var blocks1 = (0, asn1_js_1._readStruct)(bb, block_info1);
    if (doDebug) {
        console.log(blocks1.map(function (b) { return ({
            tag: asn1_js_1.TagType[b.tag] + " 0x" + b.tag.toString(16),
            l: b.length,
            p: b.position,
            buff: bb.subarray(b.position, b.position + b.length).toString("hex"),
        }); }));
    }
    var version = f(bb, blocks1[0]);
    var modulus = f(bb, blocks1[1]);
    var publicExponent = f(bb, blocks1[2]);
    var privateExponent = f(bb, blocks1[3]);
    var prime1 = f(bb, blocks1[4]);
    var prime2 = f(bb, blocks1[5]);
    var exponent1 = f(bb, blocks1[6]);
    var exponent2 = f(bb, blocks1[7]);
    return {
        version: version,
        modulus: modulus,
        publicExponent: publicExponent,
        privateExponent: privateExponent,
        prime1: prime1,
        prime2: prime2,
        exponent1: exponent1,
        exponent2: exponent2,
    };
}
exports.explorePrivateKey = explorePrivateKey;
//# sourceMappingURL=explore_private_key.js.map
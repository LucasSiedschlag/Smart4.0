"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rsaLengthRsaPublicKey = exports.rsaLengthPublicKey = exports.coerceRsaPublicKeyPem = exports.coercePublicKeyPem = exports.coercePrivateKeyPem = exports.toPem2 = exports.rsaLengthPrivateKey = void 0;
var assert_1 = __importDefault(require("assert"));
var crypto_1 = require("crypto");
var crypto_utils_js_1 = require("./crypto_utils.js");
var jsrsasign = require("jsrsasign");
function rsaLengthPrivateKey(key) {
    var keyPem = typeof key.hidden === "string" ? key.hidden : key.hidden.export({ type: "pkcs1", format: "pem" }).toString();
    var a = jsrsasign.KEYUTIL.getKey(keyPem);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthPrivateKey = rsaLengthPrivateKey;
function toPem2(raw_key, pem) {
    if (raw_key.hidden) {
        return toPem2(raw_key.hidden, pem);
    }
    (0, assert_1.default)(raw_key, "expecting a key");
    (0, assert_1.default)(typeof pem === "string");
    if (raw_key instanceof crypto_1.KeyObject) {
        if (pem === "RSA PRIVATE KEY") {
            return (0, crypto_utils_js_1.removeTrailingLF)(raw_key.export({ format: "pem", type: "pkcs1" }).toString());
        }
        else if (pem === "PRIVATE KEY") {
            return (0, crypto_utils_js_1.removeTrailingLF)(raw_key.export({ format: "pem", type: "pkcs8" }).toString());
        }
        else {
            throw new Error("Unsupported case!");
        }
    }
    return (0, crypto_utils_js_1.toPem)(raw_key, pem);
}
exports.toPem2 = toPem2;
function coercePrivateKeyPem(privateKey) {
    return toPem2(privateKey, "PRIVATE KEY");
}
exports.coercePrivateKeyPem = coercePrivateKeyPem;
function coercePublicKeyPem(publicKey) {
    if (publicKey instanceof crypto_1.KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    (0, assert_1.default)(typeof publicKey === "string");
    return publicKey;
}
exports.coercePublicKeyPem = coercePublicKeyPem;
function coerceRsaPublicKeyPem(publicKey) {
    if (publicKey instanceof crypto_1.KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    (0, assert_1.default)(typeof publicKey === "string");
    return publicKey;
}
exports.coerceRsaPublicKeyPem = coerceRsaPublicKeyPem;
function rsaLengthPublicKey(key) {
    key = coercePublicKeyPem(key);
    (0, assert_1.default)(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthPublicKey = rsaLengthPublicKey;
function rsaLengthRsaPublicKey(key) {
    key = coerceRsaPublicKeyPem(key);
    (0, assert_1.default)(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
exports.rsaLengthRsaPublicKey = rsaLengthRsaPublicKey;
//# sourceMappingURL=crypto_utils2.js.map
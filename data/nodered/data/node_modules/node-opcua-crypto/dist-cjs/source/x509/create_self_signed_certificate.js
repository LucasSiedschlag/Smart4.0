"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSelfSignedCertificate = void 0;
var subject_js_1 = require("../subject.js");
var _crypto_js_1 = require("./_crypto.js");
var _get_attributes_js_1 = require("./_get_attributes.js");
var _build_public_key_js_1 = require("./_build_public_key.js");
var asn1_schema_1 = require("@peculiar/asn1-schema");
function createSelfSignedCertificate(_a) {
    var privateKey = _a.privateKey, notAfter = _a.notAfter, notBefore = _a.notBefore, validity = _a.validity, subject = _a.subject, dns = _a.dns, ip = _a.ip, applicationUri = _a.applicationUri, purpose = _a.purpose;
    return __awaiter(this, void 0, void 0, function () {
        var crypto, publicKey, keys, _b, nsComment, basicConstraints, keyUsageExtension, usages, alternativeNameExtensions, ID_NETSCAPE_COMMENT, s, s1, name, cert, _c, _d, _e;
        var _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    crypto = (0, _crypto_js_1.getCrypto)();
                    return [4, (0, _build_public_key_js_1.buildPublicKey)(privateKey)];
                case 1:
                    publicKey = _g.sent();
                    keys = {
                        privateKey: privateKey,
                        publicKey: publicKey,
                    };
                    _b = (0, _get_attributes_js_1.getAttributes)(purpose), nsComment = _b.nsComment, basicConstraints = _b.basicConstraints, keyUsageExtension = _b.keyUsageExtension, usages = _b.usages;
                    notBefore = notBefore || new Date();
                    validity = validity || 0;
                    if (!notAfter) {
                        validity = validity || 365;
                    }
                    notAfter = notAfter || new Date(notBefore.getTime() + validity * 24 * 60 * 60 * 1000);
                    alternativeNameExtensions = [];
                    dns && dns.forEach(function (d) { return alternativeNameExtensions.push({ type: "dns", value: d }); });
                    ip && ip.forEach(function (d) { return alternativeNameExtensions.push({ type: "ip", value: d }); });
                    applicationUri && alternativeNameExtensions.push({ type: "url", value: applicationUri });
                    ID_NETSCAPE_COMMENT = "2.16.840.1.113730.1.13";
                    s = new subject_js_1.Subject(subject || "");
                    s1 = s.toStringInternal(", ");
                    name = s1;
                    _d = (_c = _crypto_js_1.x509.X509CertificateGenerator).createSelfSigned;
                    _f = {
                        serialNumber: Date.now().toString(),
                        name: name,
                        notBefore: notBefore,
                        notAfter: notAfter,
                        signingAlgorithm: { name: "RSASSA-PKCS1-v1_5", hash: { name: "SHA-256" } },
                        keys: keys
                    };
                    _e = [new _crypto_js_1.x509.Extension(ID_NETSCAPE_COMMENT, false, asn1_schema_1.AsnConvert.serialize(asn1_schema_1.AsnUtf8StringConverter.toASN(nsComment))),
                        basicConstraints,
                        new _crypto_js_1.x509.ExtendedKeyUsageExtension(keyUsageExtension, true),
                        new _crypto_js_1.x509.KeyUsagesExtension(usages, true)];
                    return [4, _crypto_js_1.x509.SubjectKeyIdentifierExtension.create(keys.publicKey)];
                case 2: return [4, _d.apply(_c, [(_f.extensions = _e.concat([
                            _g.sent(),
                            new _crypto_js_1.x509.SubjectAlternativeNameExtension(alternativeNameExtensions)
                        ]),
                            _f), crypto])];
                case 3:
                    cert = _g.sent();
                    return [2, { cert: cert.toString("pem"), der: cert }];
            }
        });
    });
}
exports.createSelfSignedCertificate = createSelfSignedCertificate;
//# sourceMappingURL=create_self_signed_certificate.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exploreCertificateRevocationList = exports.readNameForCrl = void 0;
var asn1_js_1 = require("./asn1.js");
var crypto_utils_js_1 = require("./crypto_utils.js");
function readNameForCrl(buffer, block) {
    return (0, asn1_js_1._readDirectoryName)(buffer, block);
}
exports.readNameForCrl = readNameForCrl;
function _readTbsCertList(buffer, blockInfo) {
    var blocks = (0, asn1_js_1._readStruct)(buffer, blockInfo);
    var hasOptionalVersion = blocks[0].tag === asn1_js_1.TagType.INTEGER;
    if (hasOptionalVersion) {
        var version = (0, asn1_js_1._readIntegerValue)(buffer, blocks[0]);
        var signature = (0, asn1_js_1._readAlgorithmIdentifier)(buffer, blocks[1]);
        var issuer = readNameForCrl(buffer, blocks[2]);
        var issuerFingerprint = (0, asn1_js_1.formatBuffer2DigitHexWithColum)((0, crypto_utils_js_1.makeSHA1Thumbprint)((0, asn1_js_1._getBlock)(buffer, blocks[2])));
        var thisUpdate = (0, asn1_js_1._readTime)(buffer, blocks[3]);
        var nextUpdate = (0, asn1_js_1._readTime)(buffer, blocks[4]);
        var revokedCertificates = [];
        if (blocks[5] && blocks[5].tag < 0x80) {
            var list = (0, asn1_js_1._readStruct)(buffer, blocks[5]);
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var r = list_1[_i];
                var rr = (0, asn1_js_1._readStruct)(buffer, r);
                var userCertificate = (0, asn1_js_1.formatBuffer2DigitHexWithColum)((0, asn1_js_1._readLongIntegerValue)(buffer, rr[0]));
                var revocationDate = (0, asn1_js_1._readTime)(buffer, rr[1]);
                revokedCertificates.push({
                    revocationDate: revocationDate,
                    userCertificate: userCertificate,
                });
            }
        }
        var ext0 = (0, asn1_js_1._findBlockAtIndex)(blocks, 0);
        return { issuer: issuer, issuerFingerprint: issuerFingerprint, thisUpdate: thisUpdate, nextUpdate: nextUpdate, signature: signature, revokedCertificates: revokedCertificates };
    }
    else {
        var signature = (0, asn1_js_1._readAlgorithmIdentifier)(buffer, blocks[0]);
        var issuer = readNameForCrl(buffer, blocks[1]);
        var issuerFingerprint = (0, asn1_js_1.formatBuffer2DigitHexWithColum)((0, crypto_utils_js_1.makeSHA1Thumbprint)((0, asn1_js_1._getBlock)(buffer, blocks[1])));
        var thisUpdate = (0, asn1_js_1._readTime)(buffer, blocks[2]);
        var nextUpdate = (0, asn1_js_1._readTime)(buffer, blocks[3]);
        var revokedCertificates = [];
        if (blocks[4] && blocks[4].tag < 0x80) {
            var list = (0, asn1_js_1._readStruct)(buffer, blocks[4]);
            for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {
                var r = list_2[_a];
                var rr = (0, asn1_js_1._readStruct)(buffer, r);
                var userCertificate = (0, asn1_js_1.formatBuffer2DigitHexWithColum)((0, asn1_js_1._readLongIntegerValue)(buffer, rr[0]));
                var revocationDate = (0, asn1_js_1._readTime)(buffer, rr[1]);
                revokedCertificates.push({
                    revocationDate: revocationDate,
                    userCertificate: userCertificate,
                });
            }
        }
        return { issuer: issuer, issuerFingerprint: issuerFingerprint, thisUpdate: thisUpdate, nextUpdate: nextUpdate, signature: signature, revokedCertificates: revokedCertificates };
    }
}
function exploreCertificateRevocationList(crl) {
    var blockInfo = (0, asn1_js_1.readTag)(crl, 0);
    var blocks = (0, asn1_js_1._readStruct)(crl, blockInfo);
    var tbsCertList = _readTbsCertList(crl, blocks[0]);
    var signatureAlgorithm = (0, asn1_js_1._readAlgorithmIdentifier)(crl, blocks[1]);
    var signatureValue = (0, asn1_js_1._readSignatureValueBin)(crl, blocks[2]);
    return { tbsCertList: tbsCertList, signatureAlgorithm: signatureAlgorithm, signatureValue: signatureValue };
}
exports.exploreCertificateRevocationList = exploreCertificateRevocationList;
//# sourceMappingURL=explore_certificate_revocation_list.js.map
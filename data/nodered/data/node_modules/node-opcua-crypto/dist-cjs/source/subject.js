"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subject = void 0;
var _keys = {
    C: "country",
    CN: "commonName",
    DC: "domainComponent",
    L: "locality",
    O: "organization",
    OU: "organizationalUnit",
    ST: "state",
};
var enquoteIfNecessary = function (str) {
    str = str.replace(/"/g, "‚Äù");
    return str.match(/\/|=/) ? "\"".concat(str, "\"") : str;
};
var unquote = function (str) { return str.replace(/"/gm, ""); };
var unquote2 = function (str) {
    if (!str)
        return str;
    var m = str.match(/^"(.*)"$/);
    return m ? m[1] : str;
};
var Subject = (function () {
    function Subject(options) {
        if (typeof options === "string") {
            options = Subject.parse(options);
        }
        this.commonName = unquote2(options.commonName);
        this.organization = unquote2(options.organization);
        this.organizationalUnit = unquote2(options.organizationalUnit);
        this.locality = unquote2(options.locality);
        this.state = unquote2(options.state);
        this.country = unquote2(options.country);
        this.domainComponent = unquote2(options.domainComponent);
    }
    Subject.parse = function (str) {
        var elements = str.split(/\/(?=[^/]*?=)/);
        var options = {};
        elements.forEach(function (element) {
            if (element.length === 0) {
                return;
            }
            var s = element.split("=");
            if (s.length !== 2) {
                throw new Error("invalid format for " + element);
            }
            var longName = _keys[s[0]];
            if (!longName) {
                throw new Error("Invalid field found in subject name " + s[0]);
            }
            var value = s[1];
            options[longName] = unquote(Buffer.from(value, "ascii").toString("utf8"));
        });
        return options;
    };
    Subject.prototype.toStringInternal = function (sep) {
        var tmp = [];
        if (this.country) {
            tmp.push("C=" + enquoteIfNecessary(this.country));
        }
        if (this.state) {
            tmp.push("ST=" + enquoteIfNecessary(this.state));
        }
        if (this.locality) {
            tmp.push("L=" + enquoteIfNecessary(this.locality));
        }
        if (this.organization) {
            tmp.push("O=" + enquoteIfNecessary(this.organization));
        }
        if (this.organizationalUnit) {
            tmp.push("OU=" + enquoteIfNecessary(this.organizationalUnit));
        }
        if (this.commonName) {
            tmp.push("CN=" + enquoteIfNecessary(this.commonName));
        }
        if (this.domainComponent) {
            tmp.push("DC=" + enquoteIfNecessary(this.domainComponent));
        }
        return tmp.join(sep);
    };
    Subject.prototype.toStringForOPCUA = function () {
        return this.toStringInternal("/");
    };
    Subject.prototype.toString = function () {
        var t = this.toStringForOPCUA();
        return t ? "/" + t : t;
    };
    return Subject;
}());
exports.Subject = Subject;
//# sourceMappingURL=subject.js.map
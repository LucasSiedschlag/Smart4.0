var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Subject } from "../subject.js";
import { getAttributes } from "./_get_attributes.js";
import { getCrypto, x509 } from "./_crypto.js";
import { buildPublicKey } from "./_build_public_key.js";
export function createCertificateSigningRequest(_a) {
    var privateKey = _a.privateKey, subject = _a.subject, dns = _a.dns, ip = _a.ip, applicationUri = _a.applicationUri, purpose = _a.purpose;
    return __awaiter(this, void 0, void 0, function () {
        var crypto, modulusLength, alg, publicKey, keys, alternativeNameExtensions, _b, basicConstraints, usages, s, s1, name, csr;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    crypto = getCrypto();
                    modulusLength = 2048;
                    alg = {
                        name: "RSASSA-PKCS1-v1_5",
                        hash: { name: "SHA-256" },
                        publicExponent: new Uint8Array([1, 0, 1]),
                        modulusLength: modulusLength,
                    };
                    return [4, buildPublicKey(privateKey)];
                case 1:
                    publicKey = _c.sent();
                    keys = {
                        privateKey: privateKey,
                        publicKey: publicKey,
                    };
                    alternativeNameExtensions = [];
                    dns && dns.forEach(function (d) { return alternativeNameExtensions.push({ type: "dns", value: d }); });
                    ip && ip.forEach(function (d) { return alternativeNameExtensions.push({ type: "ip", value: d }); });
                    applicationUri && alternativeNameExtensions.push({ type: "url", value: applicationUri });
                    _b = getAttributes(purpose), basicConstraints = _b.basicConstraints, usages = _b.usages;
                    s = new Subject(subject || "");
                    s1 = s.toStringInternal(", ");
                    name = s1;
                    return [4, x509.Pkcs10CertificateRequestGenerator.create({
                            name: name,
                            keys: keys,
                            signingAlgorithm: alg,
                            extensions: [
                                basicConstraints,
                                new x509.KeyUsagesExtension(usages, true),
                                new x509.SubjectAlternativeNameExtension(alternativeNameExtensions),
                            ],
                        }, crypto)];
                case 2:
                    csr = _c.sent();
                    return [2, { csr: csr.toString("pem"), der: csr }];
            }
        });
    });
}
//# sourceMappingURL=create_certificate_signing_request.js.map
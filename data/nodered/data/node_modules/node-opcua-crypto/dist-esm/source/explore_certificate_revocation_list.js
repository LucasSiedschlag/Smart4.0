import { _readStruct, readTag, _readAlgorithmIdentifier, _readSignatureValueBin, _readTime, _readLongIntegerValue, formatBuffer2DigitHexWithColum, _getBlock, _readDirectoryName, _findBlockAtIndex, _readIntegerValue, TagType, } from "./asn1.js";
import { makeSHA1Thumbprint } from "./crypto_utils.js";
export function readNameForCrl(buffer, block) {
    return _readDirectoryName(buffer, block);
}
function _readTbsCertList(buffer, blockInfo) {
    var blocks = _readStruct(buffer, blockInfo);
    var hasOptionalVersion = blocks[0].tag === TagType.INTEGER;
    if (hasOptionalVersion) {
        var version = _readIntegerValue(buffer, blocks[0]);
        var signature = _readAlgorithmIdentifier(buffer, blocks[1]);
        var issuer = readNameForCrl(buffer, blocks[2]);
        var issuerFingerprint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(_getBlock(buffer, blocks[2])));
        var thisUpdate = _readTime(buffer, blocks[3]);
        var nextUpdate = _readTime(buffer, blocks[4]);
        var revokedCertificates = [];
        if (blocks[5] && blocks[5].tag < 0x80) {
            var list = _readStruct(buffer, blocks[5]);
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var r = list_1[_i];
                var rr = _readStruct(buffer, r);
                var userCertificate = formatBuffer2DigitHexWithColum(_readLongIntegerValue(buffer, rr[0]));
                var revocationDate = _readTime(buffer, rr[1]);
                revokedCertificates.push({
                    revocationDate: revocationDate,
                    userCertificate: userCertificate,
                });
            }
        }
        var ext0 = _findBlockAtIndex(blocks, 0);
        return { issuer: issuer, issuerFingerprint: issuerFingerprint, thisUpdate: thisUpdate, nextUpdate: nextUpdate, signature: signature, revokedCertificates: revokedCertificates };
    }
    else {
        var signature = _readAlgorithmIdentifier(buffer, blocks[0]);
        var issuer = readNameForCrl(buffer, blocks[1]);
        var issuerFingerprint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(_getBlock(buffer, blocks[1])));
        var thisUpdate = _readTime(buffer, blocks[2]);
        var nextUpdate = _readTime(buffer, blocks[3]);
        var revokedCertificates = [];
        if (blocks[4] && blocks[4].tag < 0x80) {
            var list = _readStruct(buffer, blocks[4]);
            for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {
                var r = list_2[_a];
                var rr = _readStruct(buffer, r);
                var userCertificate = formatBuffer2DigitHexWithColum(_readLongIntegerValue(buffer, rr[0]));
                var revocationDate = _readTime(buffer, rr[1]);
                revokedCertificates.push({
                    revocationDate: revocationDate,
                    userCertificate: userCertificate,
                });
            }
        }
        return { issuer: issuer, issuerFingerprint: issuerFingerprint, thisUpdate: thisUpdate, nextUpdate: nextUpdate, signature: signature, revokedCertificates: revokedCertificates };
    }
}
export function exploreCertificateRevocationList(crl) {
    var blockInfo = readTag(crl, 0);
    var blocks = _readStruct(crl, blockInfo);
    var tbsCertList = _readTbsCertList(crl, blocks[0]);
    var signatureAlgorithm = _readAlgorithmIdentifier(crl, blocks[1]);
    var signatureValue = _readSignatureValueBin(crl, blocks[2]);
    return { tbsCertList: tbsCertList, signatureAlgorithm: signatureAlgorithm, signatureValue: signatureValue };
}
//# sourceMappingURL=explore_certificate_revocation_list.js.map
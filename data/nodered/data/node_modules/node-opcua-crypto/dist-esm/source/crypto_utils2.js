import assert from "assert";
import { KeyObject } from "crypto";
import { removeTrailingLF, toPem } from "./crypto_utils.js";
var jsrsasign = require("jsrsasign");
export function rsaLengthPrivateKey(key) {
    var keyPem = typeof key.hidden === "string" ? key.hidden : key.hidden.export({ type: "pkcs1", format: "pem" }).toString();
    var a = jsrsasign.KEYUTIL.getKey(keyPem);
    return a.n.toString(16).length / 2;
}
export function toPem2(raw_key, pem) {
    if (raw_key.hidden) {
        return toPem2(raw_key.hidden, pem);
    }
    assert(raw_key, "expecting a key");
    assert(typeof pem === "string");
    if (raw_key instanceof KeyObject) {
        if (pem === "RSA PRIVATE KEY") {
            return removeTrailingLF(raw_key.export({ format: "pem", type: "pkcs1" }).toString());
        }
        else if (pem === "PRIVATE KEY") {
            return removeTrailingLF(raw_key.export({ format: "pem", type: "pkcs8" }).toString());
        }
        else {
            throw new Error("Unsupported case!");
        }
    }
    return toPem(raw_key, pem);
}
export function coercePrivateKeyPem(privateKey) {
    return toPem2(privateKey, "PRIVATE KEY");
}
export function coercePublicKeyPem(publicKey) {
    if (publicKey instanceof KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    assert(typeof publicKey === "string");
    return publicKey;
}
export function coerceRsaPublicKeyPem(publicKey) {
    if (publicKey instanceof KeyObject) {
        return publicKey.export({ format: "pem", type: "spki" }).toString();
    }
    assert(typeof publicKey === "string");
    return publicKey;
}
export function rsaLengthPublicKey(key) {
    key = coercePublicKeyPem(key);
    assert(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
export function rsaLengthRsaPublicKey(key) {
    key = coerceRsaPublicKeyPem(key);
    assert(typeof key === "string");
    var a = jsrsasign.KEYUTIL.getKey(key);
    return a.n.toString(16).length / 2;
}
//# sourceMappingURL=crypto_utils2.js.map
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createVerify } from "crypto";
import { split_der, exploreCertificate } from "./crypto_explore_certificate.js";
import { toPem } from "./crypto_utils.js";
import { _readAlgorithmIdentifier, _readSignatureValueBin, readTag, _readStruct } from "./asn1.js";
export function verifyCertificateOrClrSignature(certificateOrCrl, parentCertificate) {
    var block_info = readTag(certificateOrCrl, 0);
    var blocks = _readStruct(certificateOrCrl, block_info);
    var bufferToBeSigned = certificateOrCrl.subarray(block_info.position, blocks[1].position - 2);
    var signatureAlgorithm = _readAlgorithmIdentifier(certificateOrCrl, blocks[1]);
    var signatureValue = _readSignatureValueBin(certificateOrCrl, blocks[2]);
    var p = split_der(parentCertificate)[0];
    var certPem = toPem(p, "CERTIFICATE");
    var verify = createVerify(signatureAlgorithm.identifier);
    verify.update(bufferToBeSigned);
    verify.end();
    return verify.verify(certPem, signatureValue);
}
export function verifyCertificateSignature(certificate, parentCertificate) {
    return verifyCertificateOrClrSignature(certificate, parentCertificate);
}
export function verifyCertificateRevocationListSignature(certificateRevocationList, parentCertificate) {
    return verifyCertificateOrClrSignature(certificateRevocationList, parentCertificate);
}
export function verifyCertificateChain(certificateChain) {
    return __awaiter(this, void 0, void 0, function () {
        var index, cert, certParent, certParentInfo, keyUsage, parentSignChild, certInfo;
        return __generator(this, function (_a) {
            for (index = 1; index < certificateChain.length; index++) {
                cert = certificateChain[index - 1];
                certParent = certificateChain[index];
                certParentInfo = exploreCertificate(certParent);
                keyUsage = certParentInfo.tbsCertificate.extensions.keyUsage;
                if (!keyUsage.keyCertSign) {
                    return [2, {
                            status: "BadCertificateIssuerUseNotAllowed",
                            reason: "One of the certificate in the chain has not keyUsage set for Certificate Signing",
                        }];
                }
                parentSignChild = verifyCertificateSignature(cert, certParent);
                if (!parentSignChild) {
                    return [2, {
                            status: "BadCertificateInvalid",
                            reason: "One of the certificate in the chain is not signing the previous certificate",
                        }];
                }
                certInfo = exploreCertificate(cert);
                if (!certInfo.tbsCertificate.extensions) {
                    return [2, {
                            status: "BadCertificateInvalid",
                            reason: "Cannot find X409 Extension 3 in certificate",
                        }];
                }
                if (!certParentInfo.tbsCertificate.extensions || !certInfo.tbsCertificate.extensions.authorityKeyIdentifier) {
                    return [2, {
                            status: "BadCertificateInvalid",
                            reason: "Cannot find X409 Extension 3 in certificate (parent)",
                        }];
                }
                if (certParentInfo.tbsCertificate.extensions.subjectKeyIdentifier !==
                    certInfo.tbsCertificate.extensions.authorityKeyIdentifier.keyIdentifier) {
                    return [2, {
                            status: "BadCertificateInvalid",
                            reason: "subjectKeyIdentifier authorityKeyIdentifier in child certificate do not match subjectKeyIdentifier of parent certificate",
                        }];
                }
            }
            return [2, {
                    status: "Good",
                    reason: "certificate chain is valid(length = ".concat(certificateChain.length, ")"),
                }];
        });
    });
}
//# sourceMappingURL=verify_certificate_signature.js.map
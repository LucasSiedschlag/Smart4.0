import { readTag, _findBlockAtIndex, _getBlock, _readObjectIdentifier, _readStruct } from "./asn1.js";
import { _readExtension } from "./crypto_explore_certificate.js";
function _readExtensionRequest(buffer) {
    var block = readTag(buffer, 0);
    var inner_blocks = _readStruct(buffer, block);
    var extensions = inner_blocks.map(function (block1) { return _readExtension(buffer, block1); });
    var result = {};
    for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
        var e = extensions_1[_i];
        result[e.identifier.name] = e.value;
    }
    var basicConstraints = result.basicConstraints, keyUsage = result.keyUsage, subjectAltName = result.subjectAltName;
    return { basicConstraints: basicConstraints, keyUsage: keyUsage, subjectAltName: subjectAltName };
}
export function readCertificationRequestInfo(buffer, block) {
    var blocks = _readStruct(buffer, block);
    if (blocks.length === 4) {
        var extensionRequestBlock = _findBlockAtIndex(blocks, 0);
        if (!extensionRequestBlock) {
            throw new Error("cannot find extensionRequest block");
        }
        var blocks1 = _readStruct(buffer, extensionRequestBlock);
        var blocks2 = _readStruct(buffer, blocks1[0]);
        var identifier = _readObjectIdentifier(buffer, blocks2[0]);
        if (identifier.name !== "extensionRequest") {
            throw new Error(" Cannot find extension Request in ASN1 block");
        }
        var buf = _getBlock(buffer, blocks2[1]);
        var extensionRequest = _readExtensionRequest(buf);
        return { extensionRequest: extensionRequest };
    }
    throw new Error("Invalid CSR or ");
}
export function exploreCertificateSigningRequest(crl) {
    var blockInfo = readTag(crl, 0);
    var blocks = _readStruct(crl, blockInfo);
    var csrInfo = readCertificationRequestInfo(crl, blocks[0]);
    return csrInfo;
}
//# sourceMappingURL=explore_certificate_signing_request.js.map
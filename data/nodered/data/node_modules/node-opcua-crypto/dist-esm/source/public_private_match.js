import { explorePrivateKey } from "./explore_private_key.js";
import { privateDecrypt_long, publicEncrypt_long, toPem } from "./crypto_utils.js";
import { exploreCertificate } from "./crypto_explore_certificate.js";
export function publicKeyAndPrivateKeyMatches(certificate, privateKey) {
    var i = exploreCertificate(certificate);
    var j = explorePrivateKey(privateKey);
    var modulus1 = i.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey.modulus;
    var modulus2 = j.modulus;
    if (modulus1.length != modulus2.length) {
        return false;
    }
    return modulus1.toString("hex") === modulus2.toString("hex");
}
function certificateMatchesPrivateKeyPEM(certificate, privateKey, blockSize) {
    var initialBuffer = Buffer.from("Lorem Ipsum");
    var encryptedBuffer = publicEncrypt_long(initialBuffer, certificate, blockSize, 11);
    var decryptedBuffer = privateDecrypt_long(encryptedBuffer, privateKey, blockSize);
    var finalString = decryptedBuffer.toString("utf-8");
    return initialBuffer.toString("utf-8") === finalString;
}
export function certificateMatchesPrivateKey(certificate, privateKey) {
    var e = explorePrivateKey(privateKey);
    var blockSize = e.modulus.length;
    var certificatePEM = toPem(certificate, "CERTIFICATE");
    return certificateMatchesPrivateKeyPEM(certificatePEM, privateKey, blockSize);
}
//# sourceMappingURL=public_private_match.js.map
import assert from "assert";
import { exploreCertificate } from "./crypto_explore_certificate.js";
import { convertPEMtoDER } from "./crypto_utils.js";
export function coerceCertificate(certificate) {
    if (typeof certificate === "string") {
        certificate = convertPEMtoDER(certificate);
    }
    assert(certificate instanceof Buffer);
    return certificate;
}
export function exploreCertificateInfo(certificate) {
    certificate = coerceCertificate(certificate);
    var certInfo = exploreCertificate(certificate);
    var data = {
        publicKeyLength: certInfo.tbsCertificate.subjectPublicKeyInfo.keyLength,
        notBefore: certInfo.tbsCertificate.validity.notBefore,
        notAfter: certInfo.tbsCertificate.validity.notAfter,
        publicKey: certInfo.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey,
        subject: certInfo.tbsCertificate.subject,
    };
    if (!(data.publicKeyLength === 512 ||
        data.publicKeyLength === 384 ||
        data.publicKeyLength === 256 ||
        data.publicKeyLength === 128)) {
        throw new Error("Invalid public key length (expecting 128,256,384 or 512)" + data.publicKeyLength);
    }
    return data;
}
//# sourceMappingURL=explore_certificate.js.map
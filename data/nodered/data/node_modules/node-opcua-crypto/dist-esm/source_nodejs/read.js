import assert from "assert";
import fs from "fs";
import path from "path";
import { createPrivateKey, createPublicKey } from "crypto";
import { convertPEMtoDER, identifyPemType, removeTrailingLF, toPem } from "../source/crypto_utils.js";
var sshpk = require("sshpk");
function _readPemFile(filename) {
    assert(typeof filename === "string");
    return removeTrailingLF(fs.readFileSync(filename, "utf-8"));
}
function _readPemOrDerFileAsDER(filename) {
    if (filename.match(/.*\.der/)) {
        return fs.readFileSync(filename);
    }
    var raw_key = _readPemFile(filename);
    return convertPEMtoDER(raw_key);
}
export function readCertificate(filename) {
    return _readPemOrDerFileAsDER(filename);
}
export function readPublicKey(filename) {
    if (filename.match(/.*\.der/)) {
        var der = fs.readFileSync(filename);
        return createPublicKey(der);
    }
    else {
        var raw_key = _readPemFile(filename);
        return createPublicKey(raw_key);
    }
}
function myCreatePrivateKey(rawKey) {
    if (!createPrivateKey || process.env.NO_CREATE_PRIVATEKEY) {
        if (rawKey instanceof Buffer) {
            var pemKey = toPem(rawKey, "PRIVATE KEY");
            assert(["RSA PRIVATE KEY", "PRIVATE KEY"].indexOf(identifyPemType(pemKey)) >= 0);
            return { hidden: pemKey };
        }
        return { hidden: ensureTrailingLF(rawKey) };
    }
    var backup = process.env.OPENSSL_CONF;
    process.env.OPENSSL_CONF = "/dev/null";
    var retValue = createPrivateKey(rawKey);
    process.env.OPENSSL_CONF = backup;
    return { hidden: retValue };
}
export function makePrivateKeyThumbPrint(privateKey) {
    return Buffer.alloc(0);
}
function ensureTrailingLF(str) {
    return str.match(/\n$/) ? str : str + "\n";
}
export function readPrivateKey(filename) {
    if (filename.match(/.*\.der/)) {
        var der = fs.readFileSync(filename);
        return myCreatePrivateKey(der);
    }
    else {
        var raw_key = _readPemFile(filename);
        return myCreatePrivateKey(raw_key);
    }
}
export function readCertificatePEM(filename) {
    return _readPemFile(filename);
}
export function readPublicKeyPEM(filename) {
    return _readPemFile(filename);
}
export function readPrivateKeyPEM(filename) {
    return _readPemFile(filename);
}
var __certificate_store = path.join(__dirname, "../../certificates/");
export function setCertificateStore(store) {
    var old_store = __certificate_store;
    __certificate_store = store;
    return old_store;
}
export function readPrivateRsaKey(filename) {
    if (!createPrivateKey) {
        throw new Error("createPrivateKey is not supported in this environment");
    }
    if (filename.substring(0, 1) !== "." && !fs.existsSync(filename)) {
        filename = __certificate_store + filename;
    }
    var content = fs.readFileSync(filename, "utf8");
    var sshKey = sshpk.parsePrivateKey(content, "auto");
    var key = sshKey.toString("pkcs1");
    var hidden = createPrivateKey({ format: "pem", type: "pkcs1", key: key });
    return { hidden: hidden };
}
export function readPublicRsaKey(filename) {
    if (filename.substring(0, 1) !== "." && !fs.existsSync(filename)) {
        filename = __certificate_store + filename;
    }
    var content = fs.readFileSync(filename, "utf-8");
    var sshKey = sshpk.parseKey(content, "ssh");
    var key = sshKey.toString("pkcs1");
    return createPublicKey({ format: "pem", type: "pkcs1", key: key });
}
//# sourceMappingURL=read.js.map
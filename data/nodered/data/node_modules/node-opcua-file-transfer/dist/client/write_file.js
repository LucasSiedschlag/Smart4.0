"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeOPCUAFile = void 0;
const fs = __importStar(require("node:fs"));
const node_stream_1 = require("node:stream");
const promises_1 = require("node:stream/promises");
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_debug_1 = require("node-opcua-debug");
const client_file_1 = require("./client_file");
const read_max_byte_string_length_1 = require("./read_max_byte_string_length");
const debugLog = (0, node_opcua_debug_1.make_debugLog)("FileType");
// const errorLog = make_errorLog("FileType");
// const warningLog = make_warningLog("FileType");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)("FileType");
function getTransportMaxMessageSize(session) {
    return session.getTransportSettings ? session.getTransportSettings().maxMessageSize : 0;
}
function writeOPCUAFile(clientFile, filePath, { chunkSize }) {
    return __awaiter(this, void 0, void 0, function* () {
        const maxMessageSize = getTransportMaxMessageSize(clientFile.session);
        chunkSize = chunkSize === undefined ? yield (0, read_max_byte_string_length_1.readMaxByteStringLength)(clientFile.session) : chunkSize;
        chunkSize = Math.min(chunkSize, node_opcua_binary_stream_1.BinaryStream.maxByteStringLength);
        if (maxMessageSize > 200) {
            chunkSize = Math.min(chunkSize, maxMessageSize - 1000);
        }
        if (!fs.existsSync(filePath)) {
            throw new Error(`File ${filePath} does not exist`);
        }
        const readStream = fs.createReadStream(filePath, { highWaterMark: chunkSize });
        yield clientFile.open(client_file_1.OpenFileMode.WriteEraseExisting);
        yield clientFile.setPosition(0);
        try {
            const outStream = new node_stream_1.Writable({
                write(chunk, encoding, callback) {
                    doDebug && debugLog("writing chunk", chunk.length);
                    clientFile
                        .write(chunk)
                        .then(() => callback())
                        .catch((err) => callback(err));
                }
            });
            // note: pipeline requires NodeJS 15 or above
            yield (0, promises_1.pipeline)(readStream, outStream);
        }
        catch (e) {
            debugLog(e.message);
            throw e;
        }
        finally {
            doDebug && debugLog("closing the OPCUA File");
            yield clientFile.close();
        }
    });
}
exports.writeOPCUAFile = writeOPCUAFile;
//# sourceMappingURL=write_file.js.map
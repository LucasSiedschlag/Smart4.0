"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readOPCUAFile = exports.readFile = void 0;
const node_opcua_basic_types_1 = require("node-opcua-basic-types");
const client_file_1 = require("./client_file");
const read_max_byte_string_length_1 = require("./read_max_byte_string_length");
function getTransportMaxMessageSize(session) {
    return session.getTransportSettings ? session.getTransportSettings().maxMessageSize : 0;
}
function readFile(clientFile, options) {
    return __awaiter(this, void 0, void 0, function* () {
        options = options || { chunkSize: yield (0, read_max_byte_string_length_1.readMaxByteStringLength)(clientFile.session) };
        let maxBlockSize = options.chunkSize || 1024;
        const transportMaxSize = getTransportMaxMessageSize(clientFile.session);
        maxBlockSize = transportMaxSize > 0 ? Math.min(maxBlockSize, transportMaxSize) : maxBlockSize;
        yield clientFile.open(client_file_1.OpenFileMode.Read);
        try {
            const fileSize = (0, node_opcua_basic_types_1.coerceInt32)(yield clientFile.size());
            /**
             *  Read file
             */
            const data = yield clientFile.read(Math.min(fileSize, maxBlockSize));
            if (data.length >= fileSize) {
                // everything has been read
                return data;
            }
            // wee need to loop to complete the read
            const chunks = [data];
            let remaining = fileSize - data.length;
            while (remaining > 0) {
                const buf = yield clientFile.read(Math.min(remaining, maxBlockSize));
                if (buf.length === 0)
                    break;
                chunks.push(buf);
                remaining -= buf.length;
            }
            return Buffer.concat(chunks);
        }
        finally {
            yield clientFile.close();
        }
    });
}
exports.readFile = readFile;
function readOPCUAFile(clientFile) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield readFile(clientFile);
    });
}
exports.readOPCUAFile = readOPCUAFile;
//# sourceMappingURL=read_file.js.map